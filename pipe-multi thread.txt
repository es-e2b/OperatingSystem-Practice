1. pipe() 프로그램

// 완성

#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define BUFFER_SIZE 25
#define READ_END 0
#define WRITE_END 1

int main(void)
{
    char write_msg[BUFFER_SIZE] = "Greetings";
    char write_reply[BUFFER_SIZE] = "Hello Hansung";
    char read_msg[BUFFER_SIZE];
    char read_reply[BUFFER_SIZE];
    int fd[2], fd2[2];  // 추가: 새로운 파이프 생성을 위해 fd2 변수 선언
    pid_t pid;
    /* 파이프 생성 */
    if (pipe(fd) == -1 || pipe(fd2) == -1) { // 추가: 두 개의 파이프 모두 생성
        fprintf(stderr, "Pipe failed");
        return 1;
    }

    /* 자식 프로세스 생성 */
    pid = fork();

    if (pid < 0) { /* error occurred */
        fprintf(stderr, "Fork Failed");
        return 1;
    }

    if (pid > 0) { /* 부모 프로세스 */

        /* 파이프에 쓴다 */
        write(fd[WRITE_END], write_msg, strlen(write_msg) + 1);

        /* 파이프의 쓰기 쪽을 닫는다 */
        close(fd[WRITE_END]);

        /* 파이프로부터 읽는다 */
        read(fd2[READ_END], read_reply, BUFFER_SIZE);  // 추가: 새로운 파이프로부터 읽음
        printf("reply %s\n", read_reply);

        /* 파이프의 읽기 쪽을 닫는다 */
        close(fd2[READ_END]);
    }
    else { /* 자식 프로세스 */

        /* 파이프로부터 읽는다 */
        read(fd[READ_END], read_msg, BUFFER_SIZE);
        printf("read %s\n", read_msg);

        /* 파이프의 읽기 쪽을 닫는다 */
        close(fd[READ_END]);

        sleep(1);

        /* 파이프에 쓴다 */
        write(fd2[WRITE_END], write_reply, strlen(write_reply) + 1);  // 추가: 새로운 파이프에 쓰기

        /* 파이프의 쓰기 쪽을 닫는다 */
        close(fd2[WRITE_END]);
    }

    return 0;
}







2. 멀티 쓰레드 프로그램 작성

// 완성 : 양의 정수 인자를 최대 10개까지 받는 멀티 쓰레드 프로그램.

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_THREADS 10

int sum[MAX_THREADS]; /* 이 데이터는 쓰레드들에게 공유됩니다. */
int thread_idx = 0; /* 이 데이터는 각 쓰레드에게 고유한 인덱스를 할당하는 데 사용됩니다. */
int total = 0; /* 모든 쓰레드 결과의 합을 계산하는 데 사용됩니다. */

void *runner(void *param); /* 쓰레드들이 호출하는 함수입니다. */

int main(int argc, char *argv[]) {
    pthread_t tid[MAX_THREADS]; /* 쓰레드 식별자 */
    pthread_attr_t attr[MAX_THREADS]; /* 쓰레드 속성 집합 */
    int nthreads, i;

    if (argc < 2) {
        fprintf(stderr, "사용법: %s <정수 값>...\n", argv[0]);
        return -1;
    }
    nthreads = argc - 1;
    if (nthreads > MAX_THREADS) {
        fprintf(stderr, "최대 쓰레드 수는 %d입니다.\n", MAX_THREADS);
        return -1;
    }

    /* 각 쓰레드를 생성합니다. */
    for (i = 0; i < nthreads; i++) {
        if (atoi(argv[i+1]) < 0) {
            fprintf(stderr, "%d는 0보다 크거나 같아야 합니다.\n", atoi(argv[i+1]));
            return -1;
        }

        /* 기본 속성을 가져옵니다. */
        pthread_attr_init(&attr[i]);

        /* 쓰레드를 생성합니다. */
        pthread_create(&tid[i], &attr[i], runner, argv[i+1]);
    }

    /* 각 쓰레드가 종료될 때까지 기다립니다. */
    for (i = 0; i < nthreads; i++) {
        pthread_join(tid[i], NULL);
    }

    /* 모든 쓰레드 결과의 합을 계산합니다. */
    printf("전체 합계 = %d\n", total);

    return 0;

}

/* 이 함수에서 쓰레드가 제어를 시작합니다. */
void *runner(void *param) {
    int i, upper = atoi(param);
    int thread_id = thread_idx; /* 쓰레드에게 고유한 인덱스를 할당합니다. */
    sum[thread_id] = 0;

    for (i = 1; i <= upper; i++)
        sum[thread_id] += i;
    
    /* 다음 스레드를 위해 스레드 인덱스를 증가시킵니다 */
    thread_idx++;

    /* 모든 쓰레드 결과의 합을 계산하기 위해 total 변수를 증가시킵니다. */
    total += sum[thread_id];

    printf("Thread %d sum = %d\n", thread_id, sum[thread_id]);

    pthread_exit(0);
}
